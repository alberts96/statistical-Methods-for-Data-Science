library(dplyr)
library(sjmisc)
library(magrittr)
library(caret)
library(ggplot2)
library(devtools)
library(tseries)
library(moments)
library(stringr)
library(gbm)
library(MLmetrics)
train.data = dfc[dfc$Incorporation.year < 2012,c(mostImportant,"status")]
test.data = dfc[dfc$Incorporation.year >= 2012,c(mostImportant,"status")]
nrow(train.data) / nrow(dfc)
table(train.data$status) / nrow(train.data)
table(test.data$status)/ nrow(test.data)
train.active = train.data[train.data$status=='active',]
train.failed = train.data[train.data$status=='failed',]
train.active = train.active[sample(1:nrow(train.active), nrow(train.failed)*2),]
###RANDOM FORES
trainrf.data = dfc[dfc$Incorporation.year < 2009,attributes]
testrf.data = dfc[dfc$Incorporation.year >= 2009,attributes]
# Estimate preprocessing parameters
preproc.param <- trainrf.data[,attributes] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
trainrf.transformed <- preproc.param %>% predict(trainrf.data[,attributes])
testrf.transformed <- preproc.param %>% predict(testrf.data[,attributes])
#confusion matrix
predictions.rf <- predict(fit.rf, trainrf.transformed)
confusionMatrix(predictions.rf, as.factor(trainrf.transformed$`status`),positive="active")
#confusion matrix
predictions.rf <- predict(fit.rf, testrf.transformed)
confusionMatrix(predictions.rf, as.factor(testrf.transformed$`status`),positive="active")
print(fit.rf)
###RANDOM FORES
trainrf.data = dfc[dfc$Incorporation.year < 2009,attributes]
testrf.data = dfc[dfc$Incorporation.year >= 2009,attributes]
# Estimate preprocessing parameters
preproc.param <- trainrf.data[,attributes] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
trainrf.transformed <- preproc.param %>% predict(trainrf.data[,attributes])
testrf.transformed <- preproc.param %>% predict(testrf.data[,attributes])
#confusion matrix
predictions.rf <- predict(fit.rf, trainrf.transformed)
confusionMatrix(predictions.rf, as.factor(trainrf.transformed$`status`),positive="active")
table(predictions.rf )
table(testrf.transformed$status)
table(trainrf.transformed$status)
#ROC curve
prob.rf <- predict(fit.rf, testrf.transformed, type ='prob')
ROCit_rf <- rocit(score=prob.rf,class=trainrf.transformed$status)
library(ROCit)
ROCit_rf <- rocit(score=prob.rf,class=trainrf.transformed$status)
#ROC curve
prob.rf <- predict(fit.rf, trainrf.transformed, type ='prob')
ROCit_rf <- rocit(score=prob.rf,class=trainrf.transformed$status)
plot(ROCit_rf)
plot(prob.rf)
prob.rf
ggplot(prob_rf, aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf, aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf, aes(x=failed)) + geom_density(alpha=0.2)
prob.rf <- predict(fit.rf, testrf.transformed, type ='prob')
ggplot(prob.rf, aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf, aes(x=failed)) + geom_density(alpha=0.2)
train.data = dfc[dfc$Incorporation.year < 2012,c(mostImportant,"status")]
test.data = dfc[dfc$Incorporation.year >= 2012,c(mostImportant,"status")]
nrow(train.data) / nrow(dfc)
table(train.data$status) / nrow(train.data)
table(test.data$status)/ nrow(test.data)
train.active = train.data[train.data$status=='active',]
train.failed = train.data[train.data$status=='failed',]
train.active = train.active[sample(1:nrow(train.active), nrow(train.failed)*2),]
train.data <- rbind(train.failed,train.active)
nrow(train.data) / (nrow(train.data)+nrow(test.data))
table(train.data$status)
table(test.data$status)/ nrow(test.data)
# Estimate preprocessing parameters
preproc.param <- train.data[,c(mostImportant,"status")] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
train.transformed <- preproc.param %>% predict(train.data[,c(mostImportant,"status")])
test.transformed <- preproc.param %>% predict(test.data[,c(mostImportant,"status")])
table( test.data$`status`)
#CONFUSION MATRIX
predictions.lr <- predict(fit.lr, train.transformed)
confusionMatrix(predictions.lr, as.factor(train.transformed$`status`),positive="active")
fit.lr
crossMatrixSplit <- function(pred,obs){
crossMatrixSplit <- function(pred,obs){
x <- c()
for (i in c(1:length(pred))){
if (pred[i] != obs[i]){
x <- c(x,"unknown")
}
else{
if (obs[i]=='active'){x <- c(x,'active')}
else{x <- c(x,'failed')}
}}
return(x)}
crossMatrixSplit <- function(pred,obs){
x <- c()
for (i in c(1:length(pred))){
if (pred[i] != obs[i]){
x <- c(x,"unknown")
}
else{
if (obs[i]=='active'){x <- c(x,'active')}
else{x <- c(x,'failed')}
}}
return(x)}
x = crossMatrixSplit(predictions.lr,train.transformed$status)
table(x)
}
cdji
crossMatrixSplit <- function(pred,obs){
x <- c()
for (i in c(1:length(pred))){
if (pred[i] != obs[i]){
x <- c(x,"unknown")
}
else{
if (obs[i]=='active'){x <- c(x,'active')}
else{x <- c(x,'failed')}
}}
return(x)}
x = crossMatrixSplit(predictions.lr,train.transformed$status)
table(x)
train.transformed$status = x
table(train.data$status)
table(train.transformed$status)
table(train.transformed$status)[3]
tab = table(train.transformed$status)[3]
model_weights = c()
w1 = (1/tab[1]) * 0.5
w2 = (1/tab[2]) * 0.5
for (i in train.transformed$status ){
if(i == 'active'){model_weights <- c(model_weights,w1)}
if(i == 'failed'){model_weights <- c(model_weights,w2)}
if(i == 'unknown'){model_weights <- c(model_weights,0)}
}
model_weights
w1
w2
tab = table(train.transformed$status)[3]
tab
tab = table(train.transformed$status)
model_weights = c()
w1 = (1/tab[1]) * 0.5
w2 = (1/tab[2]) * 0.5
for (i in train.transformed$status ){
if(i == 'active'){model_weights <- c(model_weights,w1)}
if(i == 'failed'){model_weights <- c(model_weights,w2)}
if(i == 'unknown'){model_weights <- c(model_weights,0)}
}
model_weights
w1
w2
fit.lr3 <- train(`status`~., data=train.transformed, method="LogitBoost", metric="Kappa", trControl=control,weights = model_weights)
library(comprehenr)
x = to_vec(for (i in predictions.rf[predictions.rf!='unknown'] ) i)
confusionMatrix(as.factor(x), as.factor(testrf.transformed[predictions.rf!='unknown',"status"]))
train.data = dfc[dfc$Incorporation.year < 2012,c(mostImportant,"status")]
test.data = dfc[dfc$Incorporation.year >= 2012,c(mostImportant,"status")]
nrow(train.data) / nrow(dfc)
table(train.data$status) / nrow(train.data)
table(test.data$status)/ nrow(test.data)
train.active = train.data[train.data$status=='active',]
train.failed = train.data[train.data$status=='failed',]
train.active = train.active[sample(1:nrow(train.active), nrow(train.failed)*2),]
train.data <- rbind(train.failed,train.active)
nrow(train.data) / (nrow(train.data)+nrow(test.data))
table(train.data$status)
table(test.data$status)/ nrow(test.data)
# Estimate preprocessing parameters
preproc.param <- train.data[,c(mostImportant,"status")] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
train.transformed <- preproc.param %>% predict(train.data[,c(mostImportant,"status")])
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='failed',], aes(x=failed)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='failed',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2) +
ggplot(prob.rf[trainrf.transformed$status=='failed',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2) +
line(prob.rf[trainrf.transformed$status=='failed',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2) +
geom_line(prob.rf[trainrf.transformed$status=='failed',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_line(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active))
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)
ggplot(prob.rf[trainrf.transformed$status=='active',], aes(x=active)) + geom_density(alpha=0.2)+geom_density(prob.rf[trainrf.transformed$status=='failed',], aes(x=active))
plot(density(prob.rf[trainrf.transformed$status=='active','active']))
lines(density(prob.rf[trainrf.transformed$status=='failed','active']))
prob.rf[trainrf.transformed$status=='active','active']
plot(density(prob.rf[trainrf.transformed$status=='active','active']))
is.na(prob.rf[trainrf.transformed$status=='active','active'])
table(is.na(prob.rf[trainrf.transformed$status=='active','active']))
#ROC curve
prob.rf <- predict(fit.rf, trainrf.transformed, type ='prob')
table(is.na(prob.rf[trainrf.transformed$status=='active','active']))
plot(density(prob.rf[trainrf.transformed$status=='active','active']))
lines(density(prob.rf[trainrf.transformed$status=='failed','active']))
lines(density(prob.rf[trainrf.transformed$status=='failed','active']))
plot(density(prob.rf[trainrf.transformed$status=='active','active']),c=1)
lines(density(prob.rf[trainrf.transformed$status=='failed','active']),c=2)
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col=1)
lines(density(prob.rf[trainrf.transformed$status=='failed','active']),col=2)
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col='blue')
lines(density(prob.rf[trainrf.transformed$status=='failed','active']),col=2)
plot(density(prob.rf[trainrf.transformed$status=='failed','active']),col='blue')
lines(density(prob.rf[trainrf.transformed$status=='failed','active']),col=2)
plot(density(prob.rf[trainrf.transformed$status=='failed','active']),col='red')
lines(density(prob.rf[trainrf.transformed$status=='active','active']),col='green')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col='green')
plot(density(prob.rf[trainrf.transformed$status=='failed','active']),col='red')
lines(density(prob.rf[trainrf.transformed$status=='active','active'])/table(), type = "l",col='green')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col='red')
lines(density(prob.rf[trainrf.transformed$status=='active','failed'])/table(), type = "l",col='green')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col='green')
lines(density(prob.rf[trainrf.transformed$status=='active','failed']), type = "l",col='red')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),col='green')
lines(density(prob.rf[trainrf.transformed$status=='active','failed']), type = "l",col='red')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),xlim = c(0,1),col='green')
lines(density(prob.rf[trainrf.transformed$status=='active','failed']), type = "l",col='red')
plot(density(prob.rf[trainrf.transformed$status=='active','active']),xlim = c(0,1),col='green')
lines(density(prob.rf[trainrf.transformed$status=='failed','active']), type = "l",col='red')
prob.rf <- predict(fit.rf, testrf.transformed, type ='prob')
plot(density(prob.rf[testrf.transformed$status=='active','active']),xlim = c(0,1),col='green')
lines(density(prob.rf[testrf.transformed$status=='failed','active']), type = "l",col='red')
predictions.rf <- predict(fit.rf, testrf.transformed)
confusionMatrix(predictions.rf[prob.rf$active >=0.75 & prob.rf$active <=0.5], as.factor(testrf.transformed[prob.rf$active >=0.75 & prob.rf$active <=0.5,'status']),positive="active")
confusionMatrix(predictions.rf[prob.rf$active >=0.75 | prob.rf$active <=0.5], as.factor(testrf.transformed[prob.rf$active >=0.75 | prob.rf$active <=0.5,'status']),positive="active")
confusionMatrix(predictions.rf[prob.rf$active >=0.7 | prob.rf$active <=0.5], as.factor(testrf.transformed[prob.rf$active >=0.75 | prob.rf$active <=0.5,'status']),positive="active")
confusionMatrix(predictions.rf[prob.rf$active >=0.7 | prob.rf$active <=0.5], as.factor(testrf.transformed[prob.rf$active >=0.7 | prob.rf$active <=0.5,'status']),positive="active")
confusionMatrix(predictions.rf[prob.rf$active >=0.75 | prob.rf$active <=0.55], as.factor(testrf.transformed[prob.rf$active >=0.75 | prob.rf$active <=0.55,'status']),positive="active")
classifierplots(ifelse(testrf.transformed$status == 'active',1,0),prob.rf$active)
library(dplyr)
library(sjmisc)
library(magrittr)
library(caret)
library(ggplot2)
library(devtools)
library(tseries)
library(moments)
library(stringr)
library(gbm)
library(MLmetrics)
classifierplots(ifelse(testrf.transformed$status == 'active',1,0),prob.rf$active)
package(classfifierplots)
library(classifierplots)
classifierplots(ifelse(testrf.transformed$status == 'active',1,0),prob.rf$active)
classifierplots(ifelse(testrf.transformed$status == 'active',0,1),prob.rf$failed)
#from the plot hte only way to split the data temporlly is using >2018 as training, since 75% of data are from 2018
train.data = dfc[dfc$Incorporation.year < 2012,c(mostImportant,"status")]
test.data = dfc[dfc$Incorporation.year >= 2012,c(mostImportant,"status")]
nrow(train.data) / nrow(dfc)
table(train.data$status) / nrow(train.data)
table(test.data$status)/ nrow(test.data)
train.active = train.data[train.data$status=='active',]
train.failed = train.data[train.data$status=='failed',]
train.active = train.active[sample(1:nrow(train.active), nrow(train.failed)*2),]
train.data <- rbind(train.failed,train.active)
nrow(train.data) / (nrow(train.data)+nrow(test.data))
table(train.data$status)
table(test.data$status)/ nrow(test.data)
# Estimate preprocessing parameters
preproc.param <- train.data[,c(mostImportant,"status")] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
train.transformed <- preproc.param %>% predict(train.data[,c(mostImportant,"status")])
test.transformed <- preproc.param %>% predict(test.data[,c(mostImportant,"status")])
fit.lr <- train(`status`~., data=train.transformed, method="LogitBoost", metric="Kappa", trControl=control,weights = model_weights)
#ROC curves
prob.lr <- predict(fit.lr, test.transformed, type ='prob')
classifierplots(ifelse(test.transformed$status == 'active',0,1),prob.lr$failed)
classifierplots(ifelse(test.transformed$status == 'active',0,1),prob.lr$failed)
#ROC curve
prob.rf <- predict(fit.rf, trainrf.transformed, type ='prob')
###RANDOM FORES
trainrf.data = dfc[dfc$Incorporation.year < 2009,attributes]
testrf.data = dfc[dfc$Incorporation.year >= 2009,attributes]
# Estimate preprocessing parameters
preproc.param <- trainrf.data[,attributes] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
trainrf.transformed <- preproc.param %>% predict(trainrf.data[,attributes])
testrf.transformed <- preproc.param %>% predict(testrf.data[,attributes])
#confusion matrix
predictions.rf <- predict(fit.rf, trainrf.transformed)
confusionMatrix(predictions.rf, as.factor(trainrf.transformed$`status`),positive="active")
prob.rf <- predict(fit.rf, testrf.transformed, type ='prob')
table(is.na(prob.rf[trainrf.transformed$status=='active','active']))
plot(density(prob.rf[trainrf.transformed$status=='active','active']),xlim = c(0,1),col='green')
lines(density(prob.rf[trainrf.transformed$status=='failed','active']), type = "l",col='red')
confusionMatrix(predictions.rf[prob.rf$active >=0.75 | prob.rf$active <=0.55], as.factor(testrf.transformed[prob.rf$active >=0.75 | prob.rf$active <=0.55,'status']),positive="active")
predictions.rf <- predict(fit.rf, testrf.transformed)
prob.rf <- predict(fit.rf, testrf.transformed, type ='prob')
confusionMatrix(predictions.rf[prob.rf$active >=0.75 | prob.rf$active <=0.55], as.factor(testrf.transformed[prob.rf$active >=0.75 | prob.rf$active <=0.55,'status']),positive="active")
length(predictions.rf[prob.rf$active < 0.75 & prob.rf$active >0.55])
length(predictions.rf[prob.rf$active < 0.75 & prob.rf$active >0.55]) / length(predictions.rf)
train.data = dfc[dfc$Incorporation.year < 2012,c(mostImportant,"status")]
test.data = dfc[dfc$Incorporation.year >= 2012,c(mostImportant,"status")]
nrow(train.data) / nrow(dfc)
table(train.data$status) / nrow(train.data)
table(test.data$status)/ nrow(test.data)
train.active = train.data[train.data$status=='active',]
train.failed = train.data[train.data$status=='failed',]
train.active = train.active[sample(1:nrow(train.active), nrow(train.failed)*2),]
train.data <- rbind(train.failed,train.active)
nrow(train.data) / (nrow(train.data)+nrow(test.data))
table(train.data$status)
table(test.data$status)/ nrow(test.data)
# Estimate preprocessing parameters
preproc.param <- train.data[,c(mostImportant,"status")] %>%
preProcess(method = c("center", "scale"))
# Transform the data using the estimated parameters
train.transformed <- preproc.param %>% predict(train.data[,c(mostImportant,"status")])
test.transformed <- preproc.param %>% predict(test.data[,c(mostImportant,"status")])
table( test.data$`status`)
#CONFUSION MATRIX
predictions.lr <- predict(fit.lr, train.transformed)
confusionMatrix(predictions.lr, as.factor(train.transformed$`status`),positive="active")
crossMatrixSplit <- function(pred,obs){
x <- c()
for (i in c(1:length(pred))){
if (pred[i] != obs[i]){
x <- c(x,"unknown")
}
else{
if (obs[i]=='active'){x <- c(x,'active')}
else{x <- c(x,'failed')}
}}
return(x)}
x = crossMatrixSplit(predictions.lr,train.transformed$status)
table(x)
train.transformed$status = x
table(train.data$status)
table(train.transformed$status)
fit.lda <- train(`status`~., data=train.transformed, method="lda", metric=metric, trControl=control,weights = model_weights)
#CONFUSION MATRIX
predictions.lda <- predict(fit.lda, train.transformed)
confusionMatrix(predictions.lda, as.factor(train.transformed$`status`),positive="active")
crossMatrixSplit <- function(pred,obs){
x <- c()
for (i in c(1:length(pred))){
if (pred[i] != obs[i]){
x <- c(x,"unknown")
}
else{
if (obs[i]=='active'){x <- c(x,'active')}
else{x <- c(x,'failed')}
}}
return(x)}
x = crossMatrixSplit(predictions.lr,train.transformed$status)
table(x)
train.transformed$status = x
table(train.data$status)
table(train.transformed$status)
x = crossMatrixSplit(predictions.lda,train.transformed$status)
tab = table(train.transformed$status)
model_weights = c()
w1 = (1/tab[1]) * 0.5
w2 = (1/tab[2]) * 0.5
for (i in train.transformed$status ){
if(i == 'active'){model_weights <- c(model_weights,w1)}
if(i == 'failed'){model_weights <- c(model_weights,w2)}
if(i == 'unknown'){model_weights <- c(model_weights,0)}
}
table(model_weights)
fit.lda3 <- train(`status`~., data=train.transformed, method="lda", metric="Kappa", trControl=control,weights = model_weights)
x = to_vec(for (i in predictions.rf[predictions.rf!='unknown'] ) i)
x = to_vect(for (i in predictions.rf[predictions.rf!='unknown'] ) i)
library(comprehenr)
x = to_vect(for (i in predictions.rf[predictions.rf!='unknown'] ) i)
x = to_vec(for (i in predictions.rf[predictions.rf!='unknown'] ) i)
confusionMatrix(as.factor(x), as.factor(testrf.transformed[predictions.rf!='unknown',"status"]))
getZones <- function(dfb) {
dfb$zone[dfb$`region`== "Sicilia" ] <- "isole"
dfb$zone[dfb$`region`== "Sardegna" ] <- "isole"
dfb$zone[dfb$`region`== "Calabria" ] <- "sud"
dfb$zone[dfb$`region`== "Basilicata" ] <- "sud"
dfb$zone[dfb$`region`== "Abruzzo" ] <- "sud"
dfb$zone[dfb$`region`== "Molise" ] <- "sud"
dfb$zone[dfb$`region`== "Campania" ] <- "sud"
dfb$zone[dfb$`region`== "Puglia" ] <- "sud"
dfb$zone[dfb$`region`== "Toscana" ] <- "centro"
dfb$zone[dfb$`region`== "Umbria" ] <- "centro"
dfb$zone[dfb$`region`== "Marche" ] <- "centro"
dfb$zone[dfb$`region`== "Lazio" ] <- "centro"
dfb$zone[dfb$`region`== "Trentino-Alto Adige" ] <- "nord est"
dfb$zone[dfb$`region`== "Veneto" ] <- "nord est"
dfb$zone[dfb$`region`== "Friuli-Venezia Giulia" ] <- "nord est"
dfb$zone[dfb$`region`== "Emilia-Romagna" ] <- "nord est"
dfb$zone[dfb$`region`== "Valle d'Aosta" ] <- "nord ovest"
dfb$zone[dfb$`region`== "Lombardia" ] <- "nord ovest"
dfb$zone[dfb$`region`== "Piemonte" ] <- "nord ovest"
dfb$zone[dfb$`region`== "Liguria" ] <- "nord ovest"
return(dfb$zone)
}
dfAB  <- read.csv(file = 'dfAB.csv')
year = 2018 #2018 is the most populet year
dfb <- dfAB[dfAB$year==year,]
dim(dfb)
dfb$region <- as.character(dfb$region)
dfb$'region'[dfb$'region' == "Valle d'Aosta/Vallée d'Aoste"] <- "Valle d'Aosta"
names(dfb)
###########ZONES###########
dfb$zone = NaN
dfb$zone = getZones(dfb)
table(dfb$zone)
for (zone in unique(dfb$zone)){
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",zone,".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",zone,".jpg"))
}
library(ggplot2)
library(stringr)
library(tidyverse)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)
library(RColorBrewer)
for (zone in unique(dfb$zone)){
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",zone,".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",zone,".jpg"))
}
for (zone in unique(dfb$zone)){
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",zone,".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",zone,".jpg"))
}
for (zone in unique(dfb$zone)){
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",zone,".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",zone,".jpg"))
}
rlang::last_error()
rlang::last_trace()
table(dfb$zone)
for (zone in unique(dfb$zone)){
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
unique(dfb$zone)
for (zone in unique(dfb$zone)){
print(str_replace(zone, ' ',''))
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
for (zone in unique(dfb$zone)){
print(str_replace(zone, ' ',''))
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
for (zone in unique(dfb$zone)){
print(str_replace(zone, ' ',''))
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))#+
#ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))#+
#ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
for (zone in unique(dfb$zone)){
print(str_replace(zone, ' ',''))
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
for (zone in unique(dfb$zone)){
print(str_replace(zone, ' ',''))
ggplot(dfb[dfb$zone==zone,], aes(x=age, fill=status))+ geom_density(position = position_fill())+
ggtitle(zone) + scale_fill_manual(values=c("#04bc3c", "#fc746c"))
ggsave(str_c("img/B/zone/age/",str_replace(zone, ' ',''),".jpg"))
ggplot(dfb[dfb$zone==zone,], aes(x=size, fill=status))+ geom_bar(position = position_fill())+
ggtitle(zone)+scale_fill_manual(values=c("#04bc3c", "#fc746c"))
ggsave(str_c("img/B/zone/size/",str_replace(zone, ' ',''),".jpg"))
}
