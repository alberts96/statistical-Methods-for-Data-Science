aes(x = year, y = n/dim(dfc)[1], fill=status ,col=c("mediumseagreen","salmon3"))+
ylab("Percentageof members") +
xlab("Date") +
geom_bar(position="stack", stat="identity")
ggplot(data = cumulative)+
aes(x = year, y = n/dim(dfc)[1], fill=status)+
scale_fill_manual(values=c("#04bc3c", "#fc746c"))+
ylab("Percentageof members") +
xlab("Date") +
geom_bar(position="stack", stat="identity")
ggplot(data = cumulative)+
aes(x = year, y = n/dim(dfc)[1], fill=status )+
scale_fill_manual(values=c("mediumseagreen","salmon3"))+   #"#04bc3c", "#fc746c")
ylab("Percentageof members") +
xlab("Date") +
geom_bar(position="stack", stat="identity")
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
dfc <- read.csv(file = 'data/dfc500k.csv')
library(dplyr)
library(sjmisc)
library(magrittr)
library(caret)
library(ggplot2)
library(devtools)
library(tseries)
library(moments)
library(stringr)
dim(dfc)
names(dfc)
for (colname in (names(dfc))){
if (str_contains(colname,"Last.avail..yr")){
names(dfc)[names(dfc) == colname] = substr(colname, 1, nchar(colname)-14)
}}
names(dfc)
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
for (name in attributes){
print(name)
print(kurtosis(train.transformed[,name]))
print(skewness(train.transformed[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
for (name in attributes){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
names(dfc)
dfc <- read.csv(file = 'data/dfc200k.csv')
for (colname in (names(dfc))){
if (str_contains(colname,"Last.avail..yr")){
names(dfc)[names(dfc) == colname] = substr(colname, 1, nchar(colname)-14)
}}
names(dfc)
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
for (name in attributes){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
for (name in attributes[c(1:-1)]){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
for (name in attributes[c(1:24)]){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
for (name in attributes[c(1:23)]){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
correlationMatrix <- cor(dfc[,1:23])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
library(reshape2)
melted_cormat <- melt(correlationMatrix)
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile("Correlation HeatMap") + theme(axis.text.x = element_text(angle = 90)).
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile("Correlation HeatMap") + theme(axis.text.x = element_text(angle = 90))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile("Correlation HeatMap")
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 90))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, x = -30))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust = -30))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust = 0))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust = 0.5))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust =1))
correlationMatrix <- cor(dfc[,2:23])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
library(reshape2)
melted_cormat <- melt(correlationMatrix)
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust =1))+
scale_colour_gradient2()
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust =1))+
scale_colour_gradient2(low = "#132B43",
high = "#56B1F7",
space = "Lab")
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust =1))+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
library(scales)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 35, hjust =1))+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 40, hjust =1),axis.title.x=element_blank(),axis.title.y=element_blank())+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
model <- train(status~., data=dfc, method="lda", preProcess=(method = c("center", "scale")), trControl=control)
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
model <- train(status~., data=dfc, method="lda", preProcess=(method = c("center", "scale")), trControl=control)
names(dfc)
model <- train(status~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","active")
model <- train(active~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
model <- train(active~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
model <- train(status~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
model
model <- train(status~., data=dfc[,attributes], method="ctree", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# estimate variable importance
importance <- varImp(model, scale=TRUE)
ctree = model
model <- train(status~., data=dfc[,attributes], method="rf", preProcess=(method = c("center", "scale")), trControl=control)
model
# estimate variable importance
importance <- varImp(model, scale=TRUE)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
model.tables()
model.matrix()
model.matrix
model.offset
# estimate variable importance
importance <- varImp(model, scale=FALSE)
dfc$status
dfc$status = as.factor(dfc$status)
dfc$status = as.factor(dfc$status)
dfc$statusù
dfc$status
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
for (name in attributes[c(1:23)]){
print(name)
print(kurtosis(dfc[,name]))
print(skewness(dfc[,name]))
# ggplot(dfc, aes(x=dfc[,name])) + geom_density(alpha=0.4) +
#   ggtitle(name)
#
#
# ggsave(str_c("img/C/attributes/",name,".jpg"))
}
model <- train(status~., data=dfc[,attributes], method="rf", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
model
dfc$status
model <- train(status~., data=dfc[dfc$year<2016,attributes], method="rf", preProcess=(method = c("center", "scale")), trControl=control)
model <- train(status~., data=dfc[dfc$year>2018,attributes], method="rf", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model <- train(status~., data=dfc[dfc$year>2018,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
print(model)
library(MASS)
modellda <- lda(status ~ ., data=dfc[dfc$year>2018,attributes])
modellda
ggplot(dfAB, aes(x=dfc[,"Total.assets.turnover..times."])) + geom_density(alpha=0.4) +
ggtitle("Total.assets.turnover..times.")
activeCumulative =  dfAB[dfAB$status=='active',] %>% group_by(year,.add=TRUE) %>% summarise(n = n()) %>% mutate(n = cumsum(n))
activeCumulative$status = 'active'
failedCumulative = dfAB[dfc$status=='failed',] %>% group_by(year,.add=TRUE) %>% summarise(n = n()) %>% mutate(n = cumsum(n))
plot(cars)
correlationMatrix <- cor(dfc[,2:23])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
model <- train(status~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
modellda <- lda(status ~ ., data=dfc[dfc,attributes])
modellda
model <- train(status~., data=dfc[sample(1:nrow(dfc), 50000),attributes], method="rf", preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
model <- train(status~., data=dfc[,attributes], method="lda", preProcess=(method = c("center", "scale")), trControl=control)
model
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
library(MASS)
model <- train(status~., data=dfc[,attributes], method='vglmAdjCat', preProcess=(method = c("center", "scale")), trControl=control)
model <- train(status~., data=dfc[sample(1:nrow(dfc), 500),attributes], method='vglmAdjCat', preProcess=(method = c("center", "scale")), trControl=control)
model
metric <- c("Accuracy","recall")
model <- train(status~., data=dfc[sample(1:nrow(dfc), 500),attributes], method='lda', preProcess=(method = c("center", "scale")), trControl=control)
model
model <- train(status~., data=dfc[sample(1:nrow(dfc), 50000),attributes], method='vglmAdjCat', preProcess=(method = c("center", "scale")), trControl=control)
library(LogicReg)
install.packages(LogicReg)
model <- train(status~., data=dfc[sample(1:nrow(dfc), 50000),attributes], method='logreg', preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
model
model <- train(status~., data=dfc[sample(1:nrow(dfc), 50000),attributes], method='logreg', preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
model <- train(status~., data=dfc[sample(1:nrow(dfc), 20000),attributes], method='logreg', preProcess=(method = c("center", "scale")), trControl=control)
model <- train(status~., data=dfc[sample(1:nrow(dfc), 20000),attributes], method='logicBag', preProcess=(method = c("center", "scale")), trControl=control)
BiocManager::install("logicFS")
install.packages("BioConductor")
install.packages("logicFS")
model <- train(status~., data=dfc[sample(1:nrow(dfc), 20000),attributes], method='logicBag', preProcess=(method = c("center", "scale")), trControl=control)
model <- train(status~., data=dfc[sample(1:nrow(dfc), 20000),attributes], method='LogitBoost', preProcess=(method = c("center", "scale")), trControl=control)
model
model <- train(status~., data=dfc[,attributes], method='LogitBoost', preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
correlationMatrix <- cor(dfc[,2:23])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
library(reshape2)
library(scales)
melted_cormat <- melt(correlationMatrix)
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 40, hjust =1),axis.title.x=element_blank(),axis.title.y=element_blank())+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
ggsave("img/C/featureSelection/correlation.jpg")
ggsave("img/C/featureSelection/correlation.jpg",width=500,height = 400)
ggsave("img/C/featureSelection/correlation.jpg",width=50,height = 40)
ggsave("img/C/featureSelection/correlation.jpg",width=40,height = 35)
melted_cormat <- melt(correlationMatrix,value.name='correlation')
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+theme(axis.text.x = element_text(angle = 40, hjust =1),axis.title.x=element_blank(),axis.title.y=element_blank())+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
ggsave("img/C/featureSelection/correlation.jpg",width=10,height = 8.75)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=correlation)) +
geom_tile()+theme(axis.text.x = element_text(angle = 40, hjust =1),axis.title.x=element_blank(),axis.title.y=element_blank())+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
ggsave("img/C/featureSelection/correlation.jpg",width=10,height = 8.75)
ggsave("img/C/featureSelection/correlation.jpg",width=7,height = 6)
ggsave("img/C/featureSelection/correlation.jpg",width=4,height = 3.5)
ggsave("img/C/featureSelection/correlation.jpg",width=3.5,height = 4)
ggsave("img/C/featureSelection/correlation.jpg",width=5,height = 3.5)
ggsave("img/C/featureSelection/correlation.jpg",width=8,height = 7)
ggsave("img/C/featureSelection/correlation.jpg",width=8.5,height = 7)
dfc <- read.csv(file = 'data/dfc200k.csv')
library(dplyr)
library(sjmisc)
library(magrittr)
library(caret)
library(ggplot2)
library(devtools)
library(tseries)
library(moments)
library(stringr)
library(LogicReg)
dim(dfc)
names(dfc)
dfc$status = as.factor(dfc$status)
names(dfc)
for (colname in (names(dfc))){
if (str_contains(colname,"Last.avail..yr")){
names(dfc)[names(dfc) == colname] = substr(colname, 1, nchar(colname)-14)
}}
names(dfc)
dfc$status = as.factor(dfc$status)
attributes = c("Banks.turnover.", "Cash.Flowth.EUR","Cost.of.debit....." , "Current.liabilities.Tot.ass..",
"Current.ratio"  , "Debt.EBITDA.ratio.","Debt.equity.ratio." , "EBITDA.Vendite."  ,  "EBITDAth.EUR" ,
"Interest.Turnover....." , "Leverage"  , "Liquidity.ratio","Net.financial.positionth.EUR",
"Net.working.capitalth.EUR","Number.of.employees" ,"Profit..loss.th.EUR" ,"Return.on.asset..ROA..",
"Return.on.equity..ROE.." ,"Return.on.investment..ROI......","Return.on.sales..ROS..",
"Solvency.ratio....."  ,"Total.assets.turnover..times.","Total.assetsth.EUR","status")
attrs5kno = c("Banks.turnover.","Cost.of.debit....." ,"Return.on.investment..ROI......")
correlationMatrix <- cor(dfc[,2:23])
library(reshape2)
library(scales)
melted_cormat <- melt(correlationMatrix,value.name='correlation')
head(melted_cormat)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=correlation)) +
geom_tile()+theme(axis.text.x = element_text(angle = 40, hjust =1),axis.title.x=element_blank(),axis.title.y=element_blank())+
scale_colour_gradient2( low = muted("red"),
mid = "white",
high = muted("blue"),
midpoint = 0,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill")
control <- trainControl(method="cv", number=10)
metric <- c("Accuracy","recall")
control <- trainControl(method="cv", number=10)
metric <- c("Accuracy","recall")
model <- train(status~., data=dfc[sample(1:nrow(dfc), 50000),attributes], method='LogitBoost', preProcess=(method = c("center", "scale")), trControl=control)
# estimate variable importance
importance <- varImp(model, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
model
# summarize the correlation matrix
print(correlationMatrix)
library(MASS)
modellda <- lda(status ~ ., data=dfc[dfc,attributes])
modellda
library(MASS)
modellda <- lda(status ~ ., data=dfc[dfc,attributes])
modellda <- lda(status ~ ., data=dfc[,attributes])
plot(modellda)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
mostImportant = c("Cash.Flowth.EUR","Cost.of.debit....." ,"EBITDAth.EUR" ,"Interest.Turnover....." , "Leverage"  ,"Solvency.ratio....."  ,"Return.on.equity..ROE.." )
length(mostImportant
)
mostImportant = c("Cash.Flowth.EUR","Cost.of.debit.....", "Net.working.capitalth.EUR","EBITDAth.EUR" ,"Interest.Turnover....." , "Leverage"  ,"Solvency.ratio....."  ,"Return.on.equity..ROE.." )
length(mostImportant
)
transparentTheme(trans = .4)
featurePlot(x = dfc[, mostImportant],
y = dfc$status,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 2))
df = dfc sample(1:nrow(dfc), 500)]
